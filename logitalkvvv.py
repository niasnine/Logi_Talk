import threading  # –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—ñ–≤ (–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)
import socket      # –¥–ª—è –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
from customtkinter import *  # –≥—Ä–∞—Ñ—ñ—á–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ (–æ–Ω–æ–≤–ª–µ–Ω–∏–π Tkinter)

class LogiTalk(CTk):  # –≥–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–∏
   def __init__(self):
       super().__init__()
       self.geometry("800x500")  # —Ä–æ–∑–º—ñ—Ä –≤—ñ–∫–Ω–∞
       self.title("LogiTalk")    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ñ–∫–Ω–∞

       set_appearance_mode("System")  # —Å–∏—Å—Ç–µ–º–∞ —Ç–µ–º–∏: —Å–≤—ñ—Ç–ª–∞/—Ç–µ–º–Ω–∞

       self.username = None  # —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
       self.sock = None      # —Å–æ–∫–µ—Ç –¥–ª—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º

       self.login_frame = None  # –µ–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
       self.create_login_ui()   # –ø–æ–∫–∞–∑–∞—Ç–∏ –µ–∫—Ä–∞–Ω –≤—Ö–æ–¥—É

   def create_login_ui(self):
       self.login_frame = CTkFrame(self)  # –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Ö–æ–¥—É
       self.login_frame.pack(expand=True)

       # –¢–µ–∫—Å—Ç "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è"
       CTkLabel(self.login_frame, text="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è", font=("Arial", 18)).pack(pady=10)

       # –ü–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
       self.name_entry = CTkEntry(self.login_frame, placeholder_text="–Ü–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
       self.name_entry.pack(pady=10)

       # –ö–Ω–æ–ø–∫–∞ "–£–≤—ñ–π—Ç–∏"
       CTkButton(self.login_frame, text="–£–≤—ñ–π—Ç–∏", command=self.open_chat).pack(pady=10)

   def open_chat(self):
       name = self.name_entry.get().strip()  # –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º'—è
       if name:
           self.username = name  # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º‚Äô—è
           self.login_frame.destroy()  # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –µ–∫—Ä–∞–Ω –≤—Ö–æ–¥—É
           self.create_main_ui()  # —Å—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ
           self.connect_to_server()  # –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞
       else:
           # –Ø–∫—â–æ —ñ–º‚Äô—è –Ω–µ –≤–≤–µ–¥–µ–Ω–æ, –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
           CTkLabel(self.login_frame, text="‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è!", text_color="red").pack(pady=5)

   def create_main_ui(self):
       # –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å (–º–µ–Ω—é)
       self.menu_panel = CTkFrame(self, width=150)
       self.menu_panel.pack(side="left", fill="y", padx=10, pady=10)

       # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
       CTkLabel(self.menu_panel, text=f"üë§ {self.username}", font=("Arial", 16)).pack(pady=10)

       # –ö–Ω–æ–ø–∫–∏: –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏—Ö—ñ–¥
       CTkButton(self.menu_panel, text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", command=self.open_settings).pack(pady=5)
       CTkButton(self.menu_panel, text="–í–∏–π—Ç–∏", command=self.destroy).pack(pady=5)

       # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –ø–∞–Ω–µ–ª—å
       self.center_panel = CTkFrame(self)
       self.center_panel.pack(expand=True, fill="both", padx=10, pady=10)

       # –ü–æ–ª–µ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—á–∞—Ç)
       self.textbox = CTkTextbox(self.center_panel, state="disabled")
       self.textbox.pack(expand=True, fill="both", padx=10, pady=(10, 5))

       # –ù–∏–∂–Ω—è –ø–∞–Ω–µ–ª—å (–≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
       self.bottom_panel = CTkFrame(self.center_panel)
       self.bottom_panel.pack(fill="x", padx=10, pady=(0, 10))

       # –ü–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
       self.entry = CTkEntry(self.bottom_panel, placeholder_text="–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
       self.entry.pack(side="left", fill="x", expand=True, padx=(0, 10))

       # –ö–Ω–æ–ø–∫–∞ "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏"
       self.send_btn = CTkButton(self.bottom_panel, text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏", command=self.send_message)
       self.send_btn.pack(side="right")

       # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ Enter
       self.entry.bind("<Return>", lambda event: self.send_message())

   def send_message(self):
       msg = self.entry.get().strip()  # –±–µ—Ä–µ–º–æ —Ç–µ–∫—Å—Ç –∑ –ø–æ–ª—è
       if msg:
           self.entry.delete(0, END)  # –æ—á–∏—â–∞—î–º–æ –ø–æ–ª–µ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
           self.display_message(f"{self.username}: {msg}")  # –ø–æ–∫–∞–∑—É—î–º–æ –≤ —á–∞—Ç—ñ
           try:
               # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
               self.sock.sendall(f"TEXT@{self.username}@{msg}\n".encode('utf-8'))
           except:
               self.display_message("‚ö†Ô∏è –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è (—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π).")
    def connect_to_server(self):
       try:
           self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # —Å—Ç–≤–æ—Ä—é—î–º–æ —Å–æ–∫–µ—Ç
           self.sock.connect(('localhost', 8080))  # –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞
           hello = f"TEXT@{self.username}@[SYSTEM] {self.username} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è(–ª–∞—Å—å) –¥–æ —á–∞—Ç—É!\n"
           self.sock.sendall(hello.encode('utf-8'))  # –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è

           # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–∫—Ä–µ–º–∏–π –ø–æ—Ç—ñ–∫ –¥–ª—è –ø—Ä–∏–π–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
           threading.Thread(target=self.receive_messages, daemon=True).start()
       except Exception as e:
           self.display_message(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

   def receive_messages(self):
       buffer = ""  # –±—É—Ñ–µ—Ä –¥–ª—è –∑–±–∏—Ä–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤
       while True:
           try:
               chunk = self.sock.recv(4096)  # –æ—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
               if not chunk:
                   break
               buffer += chunk.decode("utf-8")
               while "\n" in buffer:  # –ø–æ–∫–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –æ–±—Ä–æ–±–ª—è—î–º–æ
                   line, buffer = buffer.split("\n", 1)
                   self.process_message(line.strip())
           except:
               break
       self.sock.close()  # –∑–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–æ–∫–µ—Ç –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è

   def process_message(self, line):
       if not line:
           return
       parts = line.split("@", 3)  # —Ä–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
       if len(parts) >= 3 and parts[0] == "TEXT":
           author = parts[1]
           msg = parts[2]
           if author != self.username:  # –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Å–≤–æ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
               self.display_message(f"{author}: {msg}")

   def display_message(self, message):
       self.textbox.configure(state="normal")  # –≤–º–∏–∫–∞—î–º–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
       self.textbox.insert("end", message + "\n")  # –¥–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç
       self.textbox.configure(state="disabled")  # –±–ª–æ–∫—É—î–º–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
       self.textbox.see("end")  # –ø—Ä–æ–∫—Ä—É—á—É—î–º–æ –≤–Ω–∏–∑

   def open_settings(self):
       # –í—ñ–∫–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ç–µ–º–∏
       settings_window = CTkToplevel(self)
       settings_window.title("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
       settings_window.geometry("300x150")
       settings_window.resizable(False, False)

       CTkLabel(settings_window, text="–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", font=("Arial", 14)).pack(pady=10)

       def change_theme(choice):
           set_appearance_mode(choice)  # –∑–º—ñ–Ω–∞ —Ç–µ–º–∏

       theme_option = StringVar(value=get_appearance_mode())

       # –í–∏–ø–∞–¥–∞—é—á–∏–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º
       theme_menu = CTkOptionMenu(settings_window, variable=theme_option,
                                  values=["Light", "Dark"],
                                  command=change_theme)
       theme_menu.pack(pady=10)

       CTkButton(settings_window, text="–ó–∞–∫—Ä–∏—Ç–∏", command=settings_window.destroy).pack(pady=10)


if name == "__main__":
   app = LogiTalk()  # —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–∏
   app.mainloop()    # –∑–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É
